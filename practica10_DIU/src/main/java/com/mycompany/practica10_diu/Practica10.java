/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.practica10_diu;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;
import java.util.zip.*;
import javax.swing.DefaultListModel;

/**
 *
 * @author Rebe
 */
public class Practica10 extends javax.swing.JFrame {

    
    JFileChooser fc = new JFileChooser();
    FileNameExtensionFilter filtro = null;
    
    DefaultListModel modelFiles = new DefaultListModel();
    
    List<String> files = new ArrayList<String>();
    int BUFFER_SIZE = 10;
    
    String guardar;
    
    String predeterminado;
    
    Tarea tarea = new Tarea();
    
    
    private class Tarea extends SwingWorker<Void, Void>{

        @Override
        protected Void doInBackground() throws Exception {
            
            try{
                // Objeto para referenciar a los archivos que queremos comprimir
                BufferedInputStream origin = null;
                
                // Objeto para referenciar el archivo zip de salida
                FileOutputStream dest = new FileOutputStream(guardar+".zip");  
                ZipOutputStream out = new ZipOutputStream(new BufferedOutputStream(dest));
                
               // Buffer de transferencia para almacenar datos a comprimir
                byte[] data = new byte[BUFFER_SIZE];   
                
                int x = 100/files.size();
                int y = 1;
                Iterator i = files.iterator();
                
                barra.setVisible(true);
                while(i.hasNext()){
                    String filename = (String)i.next();
                    System.out.println(filename);
                    FileInputStream fi = new FileInputStream(filename);
                    origin = new BufferedInputStream(fi, BUFFER_SIZE);
                    
                    Thread.sleep(100);
                    barra.setValue(x*y);
                    ZipEntry entry = new ZipEntry( filename );
                    out.putNextEntry( entry );
                    
                    // Leemos datos desde el archivo origen y se envían al archivo destino
                    int count;
                    
                    while((count = origin.read(data, 0, BUFFER_SIZE)) != -1){
                        out.write(data, 0, count);
                    }
                    y = y+1;
                    // Cerramos el archivo origen, ya enviado a comprimir
                    origin.close();
                }
                
                
                // Cerramos el archivo 
                barra.setValue(100);
                out.close();
                JOptionPane.showMessageDialog(null, "Operación realizada correctamente");
            }
            catch( Exception e ){
                e.printStackTrace();
            }
            
            return null;
        }
              
        
    }
    
    public Practica10() {
        initComponents();
        barra.setStringPainted(true);
        barra.setVisible(false);
        fc.setMultiSelectionEnabled(true);  
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JList<>();
        barra = new javax.swing.JProgressBar();
        comprimir = new javax.swing.JButton();
        cancelar = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tabla.setBackground(new java.awt.Color(243, 243, 247));
        jScrollPane1.setViewportView(tabla);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, 435, 181));
        jPanel1.add(barra, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, 435, 19));

        comprimir.setBackground(new java.awt.Color(51, 153, 255));
        comprimir.setFont(new java.awt.Font("Roboto Light", 1, 12)); // NOI18N
        comprimir.setText("Comprimir");
        comprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comprimirActionPerformed(evt);
            }
        });
        jPanel1.add(comprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 290, -1, 33));

        cancelar.setBackground(new java.awt.Color(255, 51, 51));
        cancelar.setFont(new java.awt.Font("Roboto Light", 1, 12)); // NOI18N
        cancelar.setText("Cancelar");
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });
        jPanel1.add(cancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 290, 99, 33));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Compresor de archivos");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(33, 20, -1, -1));

        jButton1.setBackground(new java.awt.Color(153, 255, 153));
        jButton1.setFont(new java.awt.Font("Roboto Light", 1, 12)); // NOI18N
        jButton1.setText("Añadir archivos");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 20, 130, 30));

        jLabel2.setIcon(new javax.swing.ImageIcon("C:\\Users\\rsuar\\Pictures\\fondo.jpg")); // NOI18N
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 480, 360));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void comprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comprimirActionPerformed
        
        if(files.size() == 0){
            JOptionPane.showMessageDialog(null, "Seleccione los archivos de la carpeta que desea añadir al archivo comprimido");
        }else{
            fc.removeChoosableFileFilter(fc.getAcceptAllFileFilter());
            fc.setSelectedFile(new File(predeterminado));
            int res = fc.showSaveDialog(null);
            if(res == JFileChooser.APPROVE_OPTION){
                System.out.println("Aceptar");
                File fichero = fc.getSelectedFile();
                System.out.println("Fichero: "+ fichero.getAbsolutePath());
                guardar = fichero.getAbsolutePath();

                int res2 = JOptionPane.showConfirmDialog(rootPane, "¿Quieres comprimir los archivos en "+fichero.getAbsolutePath()+" ?", "Guardar archivo", JOptionPane.YES_NO_OPTION);

                if(res2 == JOptionPane.YES_OPTION){
                    System.out.println("Guardando fichero");                    
                    tarea.execute();     
                }
            }
            if(res == JFileChooser.CANCEL_OPTION){
                System.out.println("Cancelar");

        }
        
        tarea.execute();
        }
        
    }//GEN-LAST:event_comprimirActionPerformed

    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        tarea.cancel(true);
        JOptionPane.showMessageDialog(null, "Operación cancelada");
    }//GEN-LAST:event_cancelarActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        System.out.println("Abrir Fichero");
        
        int res = fc.showOpenDialog(null);
        
        if(res == JFileChooser.APPROVE_OPTION){            
            
            fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
            if (!fc.isMultiSelectionEnabled()) {
                fc.setMultiSelectionEnabled(true);
            }     
            
            File[] fl = fc.getSelectedFiles();
            
            predeterminado = fl[0].getParent();
            predeterminado = predeterminado.substring(predeterminado.lastIndexOf('\\')+1);
            System.out.println("PREDETERMINADO: "+predeterminado);
            
            for (int i=0; i<fl.length; i++) {
                files.add(fl[i]+"");
                System.out.println(fl[i]);          
            }   
            
            
            tabla.setModel(modelFiles);
            Iterator iter = files.iterator();
            
            while(iter.hasNext()){
                modelFiles.addElement(iter.next());
            }
            
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Practica10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Practica10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Practica10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Practica10.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Practica10().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barra;
    private javax.swing.JButton cancelar;
    private javax.swing.JButton comprimir;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<String> tabla;
    // End of variables declaration//GEN-END:variables
}
